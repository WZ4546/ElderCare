{"version":3,"file":"ExpoSpeechRecognitionModule.js","sourceRoot":"","sources":["../src/ExpoSpeechRecognitionModule.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,YAAY,EACZ,kBAAkB,EAClB,mBAAmB,GACpB,MAAM,mBAAmB,CAAC;AAI3B,kEAAkE;AAClE,4EAA4E;AAC5E,MAAM,iCAAiC,GACrC,mBAAmB,CAAkC,uBAAuB,CAAC,CAAC;AAEhF,MAAM,CAAC,MAAM,2BAA2B,GAAoC;IAC1E,GAAG,iCAAiC;IACpC,6DAA6D;IAC7D,IAAI,EAAE,GAAG,EAAE,CAAC,iCAAiC,CAAC,IAAI,EAAE;IACpD,KAAK,EAAE,GAAG,EAAE,CAAC,iCAAiC,CAAC,KAAK,EAAE;IACtD,uBAAuB,EAAE,GAAG,EAAE,CAC5B,iCAAiC,CAAC,uBAAuB,EAAE;IAC7D,mBAAmB,EAAE,GAAG,EAAE,CACxB,iCAAiC,CAAC,mBAAmB,EAAE;IACzD,aAAa,EAAE,GAAG,EAAE,CAAC,iCAAiC,CAAC,aAAa,EAAE;IACtE,mBAAmB,EAAE,GAAG,EAAE,CACxB,iCAAiC,CAAC,mBAAmB,EAAE;IACzD,4BAA4B,EAAE,GAAG,EAAE,CACjC,iCAAiC,CAAC,4BAA4B,EAAE;IAClE,4BAA4B,EAAE,GAAG,EAAE,CACjC,iCAAiC,CAAC,4BAA4B,EAAE;IAClE,2BAA2B,EAAE,GAAG,EAAE,CAChC,iCAAiC,CAAC,2BAA2B,EAAE;IACjE,iBAAiB,EAAE,GAAG,EAAE,CACtB,iCAAiC,CAAC,iBAAiB,EAAE;IACvD,sBAAsB,EAAE,GAAG,EAAE,CAC3B,iCAAiC,CAAC,sBAAsB,EAAE;CAC7D,CAAC;AAEF,MAAM,CAAC,MAAM,kCAAkC,GAAG,IAAI,YAAY,CAChE,iCAAiC,IAAI,kBAAkB,CAAC,qBAAqB,CAC9E,CAAC","sourcesContent":["import {\n  EventEmitter,\n  NativeModulesProxy,\n  requireNativeModule,\n} from \"expo-modules-core\";\n\nimport type { ExpoSpeechRecognitionModuleType } from \"./ExpoSpeechRecognitionModule.types\";\n\n// It loads the native module object from the JSI or falls back to\n// the bridge module (from NativeModulesProxy) if the remote debugger is on.\nconst ExpoSpeechRecognitionNativeModule =\n  requireNativeModule<ExpoSpeechRecognitionModuleType>(\"ExpoSpeechRecognition\");\n\nexport const ExpoSpeechRecognitionModule: ExpoSpeechRecognitionModuleType = {\n  ...ExpoSpeechRecognitionNativeModule,\n  // Avoid any function bindings when calling the native module\n  stop: () => ExpoSpeechRecognitionNativeModule.stop(),\n  abort: () => ExpoSpeechRecognitionNativeModule.abort(),\n  requestPermissionsAsync: () =>\n    ExpoSpeechRecognitionNativeModule.requestPermissionsAsync(),\n  getPermissionsAsync: () =>\n    ExpoSpeechRecognitionNativeModule.getPermissionsAsync(),\n  getStateAsync: () => ExpoSpeechRecognitionNativeModule.getStateAsync(),\n  getAssistantService: () =>\n    ExpoSpeechRecognitionNativeModule.getAssistantService(),\n  getDefaultRecognitionService: () =>\n    ExpoSpeechRecognitionNativeModule.getDefaultRecognitionService(),\n  getSpeechRecognitionServices: () =>\n    ExpoSpeechRecognitionNativeModule.getSpeechRecognitionServices(),\n  supportsOnDeviceRecognition: () =>\n    ExpoSpeechRecognitionNativeModule.supportsOnDeviceRecognition(),\n  supportsRecording: () =>\n    ExpoSpeechRecognitionNativeModule.supportsRecording(),\n  isRecognitionAvailable: () =>\n    ExpoSpeechRecognitionNativeModule.isRecognitionAvailable(),\n};\n\nexport const ExpoSpeechRecognitionModuleEmitter = new EventEmitter(\n  ExpoSpeechRecognitionNativeModule ?? NativeModulesProxy.ExpoSpeechRecognition,\n);\n"]}