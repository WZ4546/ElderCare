import type { ExpoSpeechRecognitionNativeEventMap } from "./ExpoSpeechRecognitionModule.types";
export { ExpoWebSpeechRecognition, ExpoWebSpeechGrammar, ExpoWebSpeechGrammarList, } from "./ExpoWebSpeechRecognition";
export { ExpoSpeechRecognitionModule, ExpoSpeechRecognitionModuleEmitter, } from "./ExpoSpeechRecognitionModule";
export { useSpeechRecognitionEvent } from "./useSpeechRecognitionEvent";
export { AVAudioSessionCategory, AVAudioSessionCategoryOptions, AVAudioSessionMode, RecognizerIntentExtraLanguageModel, RecognizerIntentEnableLanguageSwitch, AudioEncodingAndroid, TaskHintIOS, } from "./constants";
export declare const getSupportedLocales: (options?: {
    androidRecognitionServicePackage?: string;
}) => Promise<{
    locales: string[];
    installedLocales: string[];
}>;
export declare const getSpeechRecognitionServices: () => string[];
export declare const supportsOnDeviceRecognition: () => boolean;
export declare const supportsRecording: () => boolean;
export declare const setCategoryIOS: (options: import("./ExpoSpeechRecognitionModule.types").SetCategoryOptions) => void;
export declare const getAudioSessionCategoryAndOptionsIOS: () => {
    category: import("./ExpoSpeechRecognitionModule.types").AVAudioSessionCategoryValue;
    categoryOptions: import("./ExpoSpeechRecognitionModule.types").AVAudioSessionCategoryOptionsValue[];
    mode: import("./ExpoSpeechRecognitionModule.types").AVAudioSessionModeValue;
};
export declare const setAudioSessionActiveIOS: (value: boolean, options?: {
    notifyOthersOnDeactivation: boolean;
}) => void;
export declare const androidTriggerOfflineModelDownload: (options: {
    locale: string;
}) => Promise<{
    status: "download_success" | "opened_dialog" | "download_canceled";
    message: string;
}>;
export declare const isRecognitionAvailable: () => boolean;
export declare const getDefaultRecognitionService: () => {
    packageName: string;
};
export declare const getAssistantService: () => {
    packageName: string;
};
export declare const addSpeechRecognitionListener: <T extends keyof ExpoSpeechRecognitionNativeEventMap>(eventName: T, listener: (ev: ExpoSpeechRecognitionNativeEventMap[T]) => void) => import("expo-modules-core").Subscription;
export { type ExpoSpeechRecognitionOptions, type AndroidIntentOptions, type ExpoSpeechRecognitionNativeEventMap, type AVAudioSessionCategoryOptionsValue, type AVAudioSessionModeValue, type AVAudioSessionCategoryValue, type AudioEncodingAndroidValue, type AudioSourceOptions, type RecordingOptions, type IOSTaskHintValue, type SetCategoryOptions, type ExpoSpeechRecognitionErrorCode, type ExpoSpeechRecognitionErrorEvent, type ExpoSpeechRecognitionResultEvent, type ExpoSpeechRecognitionResult, type ExpoSpeechRecognitionResultSegment, } from "./ExpoSpeechRecognitionModule.types";
//# sourceMappingURL=index.d.ts.map